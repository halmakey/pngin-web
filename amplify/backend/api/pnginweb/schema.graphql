type Submission @model @auth(rules: [{allow: public}]) {
  id: ID!
  file: AWSURL
  Contents: [Content] @hasMany(indexName: "bySubmission", fields: ["id"])
  confirmed: Boolean
  comment: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  collectionID: ID! @index(name: "byCollection")
  userID: ID! @index(name: "byUser")
}

type Collection @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  startCallAt: AWSDateTime
  endCallAt: AWSDateTime
  sequence: Int
  Submissions: [Submission] @hasMany(indexName: "byCollection", fields: ["id"])
}

type Session @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  expireAt: AWSDateTime!
  userID: ID @index(name: "byUser")
  discordToken: String
}

enum Role {
  EXHIBITOR
  STAFF
  ADMINISTRATOR
}

type Content @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  file: AWSURL!
  comment: String!
  seq: Int!
  Tags: [Tag] @manyToMany(relationName: "TagContent")
  userID: ID @index(name: "byUser")
  submissionID: ID! @index(name: "bySubmission")
}

enum Shape {
  SQUARE
  PORTRAIT
  LANDSCAPE
}

type Tag @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  name: String!
  comment: String!
  Contents: [Content] @manyToMany(relationName: "TagContent")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  discordId: String!
  discordName: String!
  roles: [Role!]!
  Contents: [Content] @hasMany(indexName: "byUser", fields: ["id"])
  Sessions: [Session] @hasMany(indexName: "byUser", fields: ["id"])
  Submissions: [Submission] @hasMany(indexName: "byUser", fields: ["id"])
}
 